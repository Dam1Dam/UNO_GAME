/*
 * generated by Xtext 2.23.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleUNO_DamienCantin
entryRuleUNO_DamienCantin
:
{ before(grammarAccess.getUNO_DamienCantinRule()); }
	 ruleUNO_DamienCantin
{ after(grammarAccess.getUNO_DamienCantinRule()); } 
	 EOF 
;

// Rule UNO_DamienCantin
ruleUNO_DamienCantin 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUNO_DamienCantinAccess().getGroup()); }
		(rule__UNO_DamienCantin__Group__0)
		{ after(grammarAccess.getUNO_DamienCantinAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBaseVariants
entryRuleBaseVariants
:
{ before(grammarAccess.getBaseVariantsRule()); }
	 ruleBaseVariants
{ after(grammarAccess.getBaseVariantsRule()); } 
	 EOF 
;

// Rule BaseVariants
ruleBaseVariants 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBaseVariantsAccess().getGroup()); }
		(rule__BaseVariants__Group__0)
		{ after(grammarAccess.getBaseVariantsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBaseVariant
entryRuleBaseVariant
:
{ before(grammarAccess.getBaseVariantRule()); }
	 ruleBaseVariant
{ after(grammarAccess.getBaseVariantRule()); } 
	 EOF 
;

// Rule BaseVariant
ruleBaseVariant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBaseVariantAccess().getAlternatives()); }
		(rule__BaseVariant__Alternatives)
		{ after(grammarAccess.getBaseVariantAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariants
entryRuleVariants
:
{ before(grammarAccess.getVariantsRule()); }
	 ruleVariants
{ after(grammarAccess.getVariantsRule()); } 
	 EOF 
;

// Rule Variants
ruleVariants 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariantsAccess().getGroup()); }
		(rule__Variants__Group__0)
		{ after(grammarAccess.getVariantsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariant
entryRuleVariant
:
{ before(grammarAccess.getVariantRule()); }
	 ruleVariant
{ after(grammarAccess.getVariantRule()); } 
	 EOF 
;

// Rule Variant
ruleVariant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariantAccess().getAlternatives()); }
		(rule__Variant__Alternatives)
		{ after(grammarAccess.getVariantAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHands
entryRuleHands
:
{ before(grammarAccess.getHandsRule()); }
	 ruleHands
{ after(grammarAccess.getHandsRule()); } 
	 EOF 
;

// Rule Hands
ruleHands 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHandsAccess().getGroup()); }
		(rule__Hands__Group__0)
		{ after(grammarAccess.getHandsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHand
entryRuleHand
:
{ before(grammarAccess.getHandRule()); }
	 ruleHand
{ after(grammarAccess.getHandRule()); } 
	 EOF 
;

// Rule Hand
ruleHand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHandAccess().getAlternatives()); }
		(rule__Hand__Alternatives)
		{ after(grammarAccess.getHandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSpecialCards
entryRuleSpecialCards
:
{ before(grammarAccess.getSpecialCardsRule()); }
	 ruleSpecialCards
{ after(grammarAccess.getSpecialCardsRule()); } 
	 EOF 
;

// Rule SpecialCards
ruleSpecialCards 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSpecialCardsAccess().getGroup()); }
		(rule__SpecialCards__Group__0)
		{ after(grammarAccess.getSpecialCardsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSpecialCard
entryRuleSpecialCard
:
{ before(grammarAccess.getSpecialCardRule()); }
	 ruleSpecialCard
{ after(grammarAccess.getSpecialCardRule()); } 
	 EOF 
;

// Rule SpecialCard
ruleSpecialCard 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSpecialCardAccess().getAlternatives()); }
		(rule__SpecialCard__Alternatives)
		{ after(grammarAccess.getSpecialCardAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWildCard
entryRuleWildCard
:
{ before(grammarAccess.getWildCardRule()); }
	 ruleWildCard
{ after(grammarAccess.getWildCardRule()); } 
	 EOF 
;

// Rule WildCard
ruleWildCard 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWildCardAccess().getGroup()); }
		(rule__WildCard__Group__0)
		{ after(grammarAccess.getWildCardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStacking
entryRuleStacking
:
{ before(grammarAccess.getStackingRule()); }
	 ruleStacking
{ after(grammarAccess.getStackingRule()); } 
	 EOF 
;

// Rule Stacking
ruleStacking 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStackingAccess().getGroup()); }
		(rule__Stacking__Group__0)
		{ after(grammarAccess.getStackingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseVariant__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBaseVariantAccess().getPointsKeyword_0()); }
		'Points'
		{ after(grammarAccess.getBaseVariantAccess().getPointsKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getBaseVariantAccess().getCryUnoKeyword_1()); }
		'Cry Uno'
		{ after(grammarAccess.getBaseVariantAccess().getCryUnoKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getBaseVariantAccess().getSameNumberKeyword_2()); }
		'Same number'
		{ after(grammarAccess.getBaseVariantAccess().getSameNumberKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getBaseVariantAccess().getSameColorKeyword_3()); }
		'Same Color'
		{ after(grammarAccess.getBaseVariantAccess().getSameColorKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variant__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariantAccess().getHandsParserRuleCall_0()); }
		ruleHands
		{ after(grammarAccess.getVariantAccess().getHandsParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getVariantAccess().getSpecialCardsParserRuleCall_1()); }
		ruleSpecialCards
		{ after(grammarAccess.getVariantAccess().getSpecialCardsParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getVariantAccess().getStackingParserRuleCall_2()); }
		ruleStacking
		{ after(grammarAccess.getVariantAccess().getStackingParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getVariantAccess().getPlayersGameKeyword_3()); }
		'2 players game'
		{ after(grammarAccess.getVariantAccess().getPlayersGameKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getVariantAccess().getUnoMaoKeyword_4()); }
		'Uno Mao'
		{ after(grammarAccess.getVariantAccess().getUnoMaoKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getVariantAccess().getExchangeCardKeyword_5()); }
		'Exchange Card'
		{ after(grammarAccess.getVariantAccess().getExchangeCardKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getVariantAccess().getSuiteKeyword_6()); }
		'Suite'
		{ after(grammarAccess.getVariantAccess().getSuiteKeyword_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hand__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHandAccess().getHandsDownKeyword_0()); }
		'Hands Down'
		{ after(grammarAccess.getHandAccess().getHandsDownKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getHandAccess().getThreeHandsUnoKeyword_1()); }
		'Three Hands Uno'
		{ after(grammarAccess.getHandAccess().getThreeHandsUnoKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialCard__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpecialCardAccess().getWildCardParserRuleCall_0()); }
		ruleWildCard
		{ after(grammarAccess.getSpecialCardAccess().getWildCardParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSpecialCardAccess().getCardBombKeyword_1()); }
		'Card Bomb'
		{ after(grammarAccess.getSpecialCardAccess().getCardBombKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WildCard__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWildCardAccess().getShownDownKeyword_1_0()); }
		'ShownDown'
		{ after(grammarAccess.getWildCardAccess().getShownDownKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getWildCardAccess().getRouletteKeyword_1_1()); }
		'Roulette'
		{ after(grammarAccess.getWildCardAccess().getRouletteKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stacking__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStackingAccess().getAllCardsKeyword_1_0()); }
		'All Cards'
		{ after(grammarAccess.getStackingAccess().getAllCardsKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getStackingAccess().getAllExceptSpecialCardsKeyword_1_1()); }
		'All except special cards'
		{ after(grammarAccess.getStackingAccess().getAllExceptSpecialCardsKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UNO_DamienCantin__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UNO_DamienCantin__Group__0__Impl
	rule__UNO_DamienCantin__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UNO_DamienCantin__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getUNO_DamienCantinAccess().getUnoAssignment_0()); }
		(rule__UNO_DamienCantin__UnoAssignment_0)
		{ after(grammarAccess.getUNO_DamienCantinAccess().getUnoAssignment_0()); }
	)
	(
		{ before(grammarAccess.getUNO_DamienCantinAccess().getUnoAssignment_0()); }
		(rule__UNO_DamienCantin__UnoAssignment_0)*
		{ after(grammarAccess.getUNO_DamienCantinAccess().getUnoAssignment_0()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UNO_DamienCantin__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UNO_DamienCantin__Group__1__Impl
	rule__UNO_DamienCantin__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UNO_DamienCantin__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getUNO_DamienCantinAccess().getVarAssignment_1()); }
		(rule__UNO_DamienCantin__VarAssignment_1)
		{ after(grammarAccess.getUNO_DamienCantinAccess().getVarAssignment_1()); }
	)
	(
		{ before(grammarAccess.getUNO_DamienCantinAccess().getVarAssignment_1()); }
		(rule__UNO_DamienCantin__VarAssignment_1)*
		{ after(grammarAccess.getUNO_DamienCantinAccess().getVarAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UNO_DamienCantin__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UNO_DamienCantin__Group__2__Impl
	rule__UNO_DamienCantin__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UNO_DamienCantin__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUNO_DamienCantinAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getUNO_DamienCantinAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UNO_DamienCantin__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UNO_DamienCantin__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UNO_DamienCantin__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUNO_DamienCantinAccess().getGroup_3()); }
	(rule__UNO_DamienCantin__Group_3__0)?
	{ after(grammarAccess.getUNO_DamienCantinAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UNO_DamienCantin__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UNO_DamienCantin__Group_3__0__Impl
	rule__UNO_DamienCantin__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UNO_DamienCantin__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUNO_DamienCantinAccess().getBaseAssignment_3_0()); }
	(rule__UNO_DamienCantin__BaseAssignment_3_0)
	{ after(grammarAccess.getUNO_DamienCantinAccess().getBaseAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UNO_DamienCantin__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UNO_DamienCantin__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UNO_DamienCantin__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUNO_DamienCantinAccess().getVariantsAssignment_3_1()); }
	(rule__UNO_DamienCantin__VariantsAssignment_3_1)
	{ after(grammarAccess.getUNO_DamienCantinAccess().getVariantsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BaseVariants__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseVariants__Group__0__Impl
	rule__BaseVariants__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseVariants__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseVariantsAccess().getBaseKeyword_0()); }
	'Base:'
	{ after(grammarAccess.getBaseVariantsAccess().getBaseKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseVariants__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseVariants__Group__1__Impl
	rule__BaseVariants__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseVariants__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseVariantsAccess().getBaseVariantParserRuleCall_1()); }
	ruleBaseVariant
	{ after(grammarAccess.getBaseVariantsAccess().getBaseVariantParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseVariants__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseVariants__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseVariants__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseVariantsAccess().getGroup_2()); }
	(rule__BaseVariants__Group_2__0)*
	{ after(grammarAccess.getBaseVariantsAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BaseVariants__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseVariants__Group_2__0__Impl
	rule__BaseVariants__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseVariants__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseVariantsAccess().getHyphenMinusKeyword_2_0()); }
	'-'
	{ after(grammarAccess.getBaseVariantsAccess().getHyphenMinusKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseVariants__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseVariants__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseVariants__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseVariantsAccess().getBaseVariantParserRuleCall_2_1()); }
	ruleBaseVariant
	{ after(grammarAccess.getBaseVariantsAccess().getBaseVariantParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variants__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variants__Group__0__Impl
	rule__Variants__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variants__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantsAccess().getVariantsKeyword_0()); }
	'Variants:'
	{ after(grammarAccess.getVariantsAccess().getVariantsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variants__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variants__Group__1__Impl
	rule__Variants__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variants__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantsAccess().getVariantParserRuleCall_1()); }
	ruleVariant
	{ after(grammarAccess.getVariantsAccess().getVariantParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variants__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variants__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variants__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantsAccess().getGroup_2()); }
	(rule__Variants__Group_2__0)*
	{ after(grammarAccess.getVariantsAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variants__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variants__Group_2__0__Impl
	rule__Variants__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variants__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantsAccess().getHyphenMinusKeyword_2_0()); }
	'-'
	{ after(grammarAccess.getVariantsAccess().getHyphenMinusKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variants__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variants__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variants__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantsAccess().getVariantParserRuleCall_2_1()); }
	ruleVariant
	{ after(grammarAccess.getVariantsAccess().getVariantParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Hands__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hands__Group__0__Impl
	rule__Hands__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Hands__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHandsAccess().getHandsKeyword_0()); }
	'Hands:'
	{ after(grammarAccess.getHandsAccess().getHandsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hands__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hands__Group__1__Impl
	rule__Hands__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Hands__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHandsAccess().getHandParserRuleCall_1()); }
	ruleHand
	{ after(grammarAccess.getHandsAccess().getHandParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hands__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hands__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Hands__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHandsAccess().getGroup_2()); }
	(rule__Hands__Group_2__0)*
	{ after(grammarAccess.getHandsAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Hands__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hands__Group_2__0__Impl
	rule__Hands__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Hands__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHandsAccess().getSolidusKeyword_2_0()); }
	'/'
	{ after(grammarAccess.getHandsAccess().getSolidusKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hands__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hands__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Hands__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHandsAccess().getHandParserRuleCall_2_1()); }
	ruleHand
	{ after(grammarAccess.getHandsAccess().getHandParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SpecialCards__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpecialCards__Group__0__Impl
	rule__SpecialCards__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialCards__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecialCardsAccess().getSpecialCardsKeyword_0()); }
	'Special Cards:'
	{ after(grammarAccess.getSpecialCardsAccess().getSpecialCardsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialCards__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpecialCards__Group__1__Impl
	rule__SpecialCards__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialCards__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecialCardsAccess().getSpecialCardParserRuleCall_1()); }
	ruleSpecialCard
	{ after(grammarAccess.getSpecialCardsAccess().getSpecialCardParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialCards__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpecialCards__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialCards__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecialCardsAccess().getGroup_2()); }
	(rule__SpecialCards__Group_2__0)*
	{ after(grammarAccess.getSpecialCardsAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SpecialCards__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpecialCards__Group_2__0__Impl
	rule__SpecialCards__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialCards__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecialCardsAccess().getSolidusKeyword_2_0()); }
	'/'
	{ after(grammarAccess.getSpecialCardsAccess().getSolidusKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialCards__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpecialCards__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialCards__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecialCardsAccess().getSpecialCardParserRuleCall_2_1()); }
	ruleSpecialCard
	{ after(grammarAccess.getSpecialCardsAccess().getSpecialCardParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WildCard__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WildCard__Group__0__Impl
	rule__WildCard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WildCard__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWildCardAccess().getWildCardKeyword_0()); }
	'WildCard:'
	{ after(grammarAccess.getWildCardAccess().getWildCardKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WildCard__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WildCard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WildCard__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWildCardAccess().getAlternatives_1()); }
	(rule__WildCard__Alternatives_1)
	{ after(grammarAccess.getWildCardAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Stacking__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stacking__Group__0__Impl
	rule__Stacking__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Stacking__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStackingAccess().getStackingKeyword_0()); }
	'Stacking:'
	{ after(grammarAccess.getStackingAccess().getStackingKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stacking__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stacking__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Stacking__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStackingAccess().getAlternatives_1()); }
	(rule__Stacking__Alternatives_1)
	{ after(grammarAccess.getStackingAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UNO_DamienCantin__UnoAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUNO_DamienCantinAccess().getUnoUnoGameKeyword_0_0()); }
		(
			{ before(grammarAccess.getUNO_DamienCantinAccess().getUnoUnoGameKeyword_0_0()); }
			'Uno game'
			{ after(grammarAccess.getUNO_DamienCantinAccess().getUnoUnoGameKeyword_0_0()); }
		)
		{ after(grammarAccess.getUNO_DamienCantinAccess().getUnoUnoGameKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UNO_DamienCantin__VarAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUNO_DamienCantinAccess().getVarIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getUNO_DamienCantinAccess().getVarIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UNO_DamienCantin__BaseAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUNO_DamienCantinAccess().getBaseBaseVariantsParserRuleCall_3_0_0()); }
		ruleBaseVariants
		{ after(grammarAccess.getUNO_DamienCantinAccess().getBaseBaseVariantsParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UNO_DamienCantin__VariantsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUNO_DamienCantinAccess().getVariantsVariantsParserRuleCall_3_1_0()); }
		ruleVariants
		{ after(grammarAccess.getUNO_DamienCantinAccess().getVariantsVariantsParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
