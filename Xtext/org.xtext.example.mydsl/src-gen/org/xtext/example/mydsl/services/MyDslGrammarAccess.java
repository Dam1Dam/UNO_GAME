/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class UNO_DamienCantinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.UNO_DamienCantin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cUnoUnoGameKeyword_0_0 = (Keyword)cUnoAssignment_0.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarIDTerminalRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cBaseAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cBaseBaseVariantsParserRuleCall_3_0_0 = (RuleCall)cBaseAssignment_3_0.eContents().get(0);
		private final Assignment cVariantsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariantsVariantsParserRuleCall_3_1_0 = (RuleCall)cVariantsAssignment_3_1.eContents().get(0);
		
		//UNO_DamienCantin:
		//	uno='Uno game'+ var=ID+ ':' (base=BaseVariants
		//	variants=Variants)?;
		@Override public ParserRule getRule() { return rule; }
		
		//uno='Uno game'+ var=ID+ ':' (base=BaseVariants variants=Variants)?
		public Group getGroup() { return cGroup; }
		
		//uno='Uno game'+
		public Assignment getUnoAssignment_0() { return cUnoAssignment_0; }
		
		//'Uno game'
		public Keyword getUnoUnoGameKeyword_0_0() { return cUnoUnoGameKeyword_0_0; }
		
		//var=ID+
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_1_0() { return cVarIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//(base=BaseVariants variants=Variants)?
		public Group getGroup_3() { return cGroup_3; }
		
		//base=BaseVariants
		public Assignment getBaseAssignment_3_0() { return cBaseAssignment_3_0; }
		
		//BaseVariants
		public RuleCall getBaseBaseVariantsParserRuleCall_3_0_0() { return cBaseBaseVariantsParserRuleCall_3_0_0; }
		
		//variants=Variants
		public Assignment getVariantsAssignment_3_1() { return cVariantsAssignment_3_1; }
		
		//Variants
		public RuleCall getVariantsVariantsParserRuleCall_3_1_0() { return cVariantsVariantsParserRuleCall_3_1_0; }
	}
	public class BaseVariantsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BaseVariants");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBaseVariantParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cBaseVariantParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//BaseVariants:
		//	'Base:' BaseVariant ('-' BaseVariant)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Base:' BaseVariant ('-' BaseVariant)*
		public Group getGroup() { return cGroup; }
		
		//'Base:'
		public Keyword getBaseKeyword_0() { return cBaseKeyword_0; }
		
		//BaseVariant
		public RuleCall getBaseVariantParserRuleCall_1() { return cBaseVariantParserRuleCall_1; }
		
		//('-' BaseVariant)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2_0() { return cHyphenMinusKeyword_2_0; }
		
		//BaseVariant
		public RuleCall getBaseVariantParserRuleCall_2_1() { return cBaseVariantParserRuleCall_2_1; }
	}
	public class BaseVariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BaseVariant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPointsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCryUnoKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSameNumberKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSameColorKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//BaseVariant:
		//	'Points' | 'Cry Uno' | 'Same number' | 'Same Color';
		@Override public ParserRule getRule() { return rule; }
		
		//'Points' | 'Cry Uno' | 'Same number' | 'Same Color'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Points'
		public Keyword getPointsKeyword_0() { return cPointsKeyword_0; }
		
		//'Cry Uno'
		public Keyword getCryUnoKeyword_1() { return cCryUnoKeyword_1; }
		
		//'Same number'
		public Keyword getSameNumberKeyword_2() { return cSameNumberKeyword_2; }
		
		//'Same Color'
		public Keyword getSameColorKeyword_3() { return cSameColorKeyword_3; }
	}
	public class VariantsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Variants");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariantsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cVariantParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cVariantParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//Variants:
		//	'Variants:' Variant ('-' Variant)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Variants:' Variant ('-' Variant)*
		public Group getGroup() { return cGroup; }
		
		//'Variants:'
		public Keyword getVariantsKeyword_0() { return cVariantsKeyword_0; }
		
		//Variant
		public RuleCall getVariantParserRuleCall_1() { return cVariantParserRuleCall_1; }
		
		//('-' Variant)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2_0() { return cHyphenMinusKeyword_2_0; }
		
		//Variant
		public RuleCall getVariantParserRuleCall_2_1() { return cVariantParserRuleCall_2_1; }
	}
	public class VariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Variant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHandsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSpecialCardsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStackingParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Keyword cPlayersGameKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cUnoMaoKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cExchangeCardKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cSuiteKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//Variant:
		//	Hands | SpecialCards | Stacking | '2 players game' | 'Uno Mao' | 'Exchange Card' | 'Suite';
		@Override public ParserRule getRule() { return rule; }
		
		//Hands | SpecialCards | Stacking | '2 players game' | 'Uno Mao' | 'Exchange Card' | 'Suite'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Hands
		public RuleCall getHandsParserRuleCall_0() { return cHandsParserRuleCall_0; }
		
		//SpecialCards
		public RuleCall getSpecialCardsParserRuleCall_1() { return cSpecialCardsParserRuleCall_1; }
		
		//Stacking
		public RuleCall getStackingParserRuleCall_2() { return cStackingParserRuleCall_2; }
		
		//'2 players game'
		public Keyword getPlayersGameKeyword_3() { return cPlayersGameKeyword_3; }
		
		//'Uno Mao'
		public Keyword getUnoMaoKeyword_4() { return cUnoMaoKeyword_4; }
		
		//'Exchange Card'
		public Keyword getExchangeCardKeyword_5() { return cExchangeCardKeyword_5; }
		
		//'Suite'
		public Keyword getSuiteKeyword_6() { return cSuiteKeyword_6; }
	}
	public class HandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Hands");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHandsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cHandParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSolidusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cHandParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//Hands:
		//	'Hands:' Hand ('/' Hand)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Hands:' Hand ('/' Hand)*
		public Group getGroup() { return cGroup; }
		
		//'Hands:'
		public Keyword getHandsKeyword_0() { return cHandsKeyword_0; }
		
		//Hand
		public RuleCall getHandParserRuleCall_1() { return cHandParserRuleCall_1; }
		
		//('/' Hand)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'/'
		public Keyword getSolidusKeyword_2_0() { return cSolidusKeyword_2_0; }
		
		//Hand
		public RuleCall getHandParserRuleCall_2_1() { return cHandParserRuleCall_2_1; }
	}
	public class HandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Hand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHandsDownKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cThreeHandsUnoKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Hand:
		//	'Hands Down' | 'Three Hands Uno';
		@Override public ParserRule getRule() { return rule; }
		
		//'Hands Down' | 'Three Hands Uno'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Hands Down'
		public Keyword getHandsDownKeyword_0() { return cHandsDownKeyword_0; }
		
		//'Three Hands Uno'
		public Keyword getThreeHandsUnoKeyword_1() { return cThreeHandsUnoKeyword_1; }
	}
	public class SpecialCardsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SpecialCards");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpecialCardsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSpecialCardParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSolidusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cSpecialCardParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//SpecialCards:
		//	'Special Cards:' SpecialCard ('/' SpecialCard)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Special Cards:' SpecialCard ('/' SpecialCard)*
		public Group getGroup() { return cGroup; }
		
		//'Special Cards:'
		public Keyword getSpecialCardsKeyword_0() { return cSpecialCardsKeyword_0; }
		
		//SpecialCard
		public RuleCall getSpecialCardParserRuleCall_1() { return cSpecialCardParserRuleCall_1; }
		
		//('/' SpecialCard)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'/'
		public Keyword getSolidusKeyword_2_0() { return cSolidusKeyword_2_0; }
		
		//SpecialCard
		public RuleCall getSpecialCardParserRuleCall_2_1() { return cSpecialCardParserRuleCall_2_1; }
	}
	public class SpecialCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SpecialCard");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWildCardParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cCardBombKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//SpecialCard:
		//	WildCard | 'Card Bomb';
		@Override public ParserRule getRule() { return rule; }
		
		//WildCard | 'Card Bomb'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WildCard
		public RuleCall getWildCardParserRuleCall_0() { return cWildCardParserRuleCall_0; }
		
		//'Card Bomb'
		public Keyword getCardBombKeyword_1() { return cCardBombKeyword_1; }
	}
	public class WildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.WildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWildCardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cShownDownKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cRouletteKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//WildCard:
		//	'WildCard:' ('ShownDown' | 'Roulette');
		@Override public ParserRule getRule() { return rule; }
		
		//'WildCard:' ('ShownDown' | 'Roulette')
		public Group getGroup() { return cGroup; }
		
		//'WildCard:'
		public Keyword getWildCardKeyword_0() { return cWildCardKeyword_0; }
		
		//('ShownDown' | 'Roulette')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'ShownDown'
		public Keyword getShownDownKeyword_1_0() { return cShownDownKeyword_1_0; }
		
		//'Roulette'
		public Keyword getRouletteKeyword_1_1() { return cRouletteKeyword_1_1; }
	}
	public class StackingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Stacking");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStackingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cAllCardsKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cAllExceptSpecialCardsKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Stacking:
		//	'Stacking:' ('All Cards' | 'All except special cards');
		@Override public ParserRule getRule() { return rule; }
		
		//'Stacking:' ('All Cards' | 'All except special cards')
		public Group getGroup() { return cGroup; }
		
		//'Stacking:'
		public Keyword getStackingKeyword_0() { return cStackingKeyword_0; }
		
		//('All Cards' | 'All except special cards')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'All Cards'
		public Keyword getAllCardsKeyword_1_0() { return cAllCardsKeyword_1_0; }
		
		//'All except special cards'
		public Keyword getAllExceptSpecialCardsKeyword_1_1() { return cAllExceptSpecialCardsKeyword_1_1; }
	}
	
	
	private final UNO_DamienCantinElements pUNO_DamienCantin;
	private final BaseVariantsElements pBaseVariants;
	private final BaseVariantElements pBaseVariant;
	private final VariantsElements pVariants;
	private final VariantElements pVariant;
	private final HandsElements pHands;
	private final HandElements pHand;
	private final SpecialCardsElements pSpecialCards;
	private final SpecialCardElements pSpecialCard;
	private final WildCardElements pWildCard;
	private final StackingElements pStacking;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pUNO_DamienCantin = new UNO_DamienCantinElements();
		this.pBaseVariants = new BaseVariantsElements();
		this.pBaseVariant = new BaseVariantElements();
		this.pVariants = new VariantsElements();
		this.pVariant = new VariantElements();
		this.pHands = new HandsElements();
		this.pHand = new HandElements();
		this.pSpecialCards = new SpecialCardsElements();
		this.pSpecialCard = new SpecialCardElements();
		this.pWildCard = new WildCardElements();
		this.pStacking = new StackingElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//UNO_DamienCantin:
	//	uno='Uno game'+ var=ID+ ':' (base=BaseVariants
	//	variants=Variants)?;
	public UNO_DamienCantinElements getUNO_DamienCantinAccess() {
		return pUNO_DamienCantin;
	}
	
	public ParserRule getUNO_DamienCantinRule() {
		return getUNO_DamienCantinAccess().getRule();
	}
	
	//BaseVariants:
	//	'Base:' BaseVariant ('-' BaseVariant)*;
	public BaseVariantsElements getBaseVariantsAccess() {
		return pBaseVariants;
	}
	
	public ParserRule getBaseVariantsRule() {
		return getBaseVariantsAccess().getRule();
	}
	
	//BaseVariant:
	//	'Points' | 'Cry Uno' | 'Same number' | 'Same Color';
	public BaseVariantElements getBaseVariantAccess() {
		return pBaseVariant;
	}
	
	public ParserRule getBaseVariantRule() {
		return getBaseVariantAccess().getRule();
	}
	
	//Variants:
	//	'Variants:' Variant ('-' Variant)*;
	public VariantsElements getVariantsAccess() {
		return pVariants;
	}
	
	public ParserRule getVariantsRule() {
		return getVariantsAccess().getRule();
	}
	
	//Variant:
	//	Hands | SpecialCards | Stacking | '2 players game' | 'Uno Mao' | 'Exchange Card' | 'Suite';
	public VariantElements getVariantAccess() {
		return pVariant;
	}
	
	public ParserRule getVariantRule() {
		return getVariantAccess().getRule();
	}
	
	//Hands:
	//	'Hands:' Hand ('/' Hand)*;
	public HandsElements getHandsAccess() {
		return pHands;
	}
	
	public ParserRule getHandsRule() {
		return getHandsAccess().getRule();
	}
	
	//Hand:
	//	'Hands Down' | 'Three Hands Uno';
	public HandElements getHandAccess() {
		return pHand;
	}
	
	public ParserRule getHandRule() {
		return getHandAccess().getRule();
	}
	
	//SpecialCards:
	//	'Special Cards:' SpecialCard ('/' SpecialCard)*;
	public SpecialCardsElements getSpecialCardsAccess() {
		return pSpecialCards;
	}
	
	public ParserRule getSpecialCardsRule() {
		return getSpecialCardsAccess().getRule();
	}
	
	//SpecialCard:
	//	WildCard | 'Card Bomb';
	public SpecialCardElements getSpecialCardAccess() {
		return pSpecialCard;
	}
	
	public ParserRule getSpecialCardRule() {
		return getSpecialCardAccess().getRule();
	}
	
	//WildCard:
	//	'WildCard:' ('ShownDown' | 'Roulette');
	public WildCardElements getWildCardAccess() {
		return pWildCard;
	}
	
	public ParserRule getWildCardRule() {
		return getWildCardAccess().getRule();
	}
	
	//Stacking:
	//	'Stacking:' ('All Cards' | 'All except special cards');
	public StackingElements getStackingAccess() {
		return pStacking;
	}
	
	public ParserRule getStackingRule() {
		return getStackingAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
