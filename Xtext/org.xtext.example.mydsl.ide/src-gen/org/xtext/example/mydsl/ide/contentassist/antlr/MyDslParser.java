/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getBaseVariantAccess().getAlternatives(), "rule__BaseVariant__Alternatives");
			builder.put(grammarAccess.getVariantAccess().getAlternatives(), "rule__Variant__Alternatives");
			builder.put(grammarAccess.getHandAccess().getAlternatives(), "rule__Hand__Alternatives");
			builder.put(grammarAccess.getSpecialCardAccess().getAlternatives(), "rule__SpecialCard__Alternatives");
			builder.put(grammarAccess.getWildCardAccess().getAlternatives_1(), "rule__WildCard__Alternatives_1");
			builder.put(grammarAccess.getStackingAccess().getAlternatives_1(), "rule__Stacking__Alternatives_1");
			builder.put(grammarAccess.getUNO_DamienCantinAccess().getGroup(), "rule__UNO_DamienCantin__Group__0");
			builder.put(grammarAccess.getUNO_DamienCantinAccess().getGroup_3(), "rule__UNO_DamienCantin__Group_3__0");
			builder.put(grammarAccess.getBaseVariantsAccess().getGroup(), "rule__BaseVariants__Group__0");
			builder.put(grammarAccess.getBaseVariantsAccess().getGroup_2(), "rule__BaseVariants__Group_2__0");
			builder.put(grammarAccess.getVariantsAccess().getGroup(), "rule__Variants__Group__0");
			builder.put(grammarAccess.getVariantsAccess().getGroup_2(), "rule__Variants__Group_2__0");
			builder.put(grammarAccess.getHandsAccess().getGroup(), "rule__Hands__Group__0");
			builder.put(grammarAccess.getHandsAccess().getGroup_2(), "rule__Hands__Group_2__0");
			builder.put(grammarAccess.getSpecialCardsAccess().getGroup(), "rule__SpecialCards__Group__0");
			builder.put(grammarAccess.getSpecialCardsAccess().getGroup_2(), "rule__SpecialCards__Group_2__0");
			builder.put(grammarAccess.getWildCardAccess().getGroup(), "rule__WildCard__Group__0");
			builder.put(grammarAccess.getStackingAccess().getGroup(), "rule__Stacking__Group__0");
			builder.put(grammarAccess.getUNO_DamienCantinAccess().getUnoAssignment_0(), "rule__UNO_DamienCantin__UnoAssignment_0");
			builder.put(grammarAccess.getUNO_DamienCantinAccess().getVarAssignment_1(), "rule__UNO_DamienCantin__VarAssignment_1");
			builder.put(grammarAccess.getUNO_DamienCantinAccess().getBaseAssignment_3_0(), "rule__UNO_DamienCantin__BaseAssignment_3_0");
			builder.put(grammarAccess.getUNO_DamienCantinAccess().getVariantsAssignment_3_1(), "rule__UNO_DamienCantin__VariantsAssignment_3_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
